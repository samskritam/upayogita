package net.pragyah.samskritam.upyogita.uchchaaran

/**
 * Created by vipul on 3/30/14.
 */



object सत्य extends Enumeration{
  type  सत्य = Value
  val ना = Value(0)     // न के स्थान पर ना - क्योंकि न अपने में एक अक्षर है
  val अाम् = Value(1)
}

//implicit  def devnagriToBool


object समय extends Enumeration{
  type समय = Value
  val न्यून = Value(1)
  val ह्रस्व= Value(2)
  val दीर्घ = Value(4)
}

object स्पर्ष_स्थान extends Enumeration{
  type स्पर्ष_स्थान = Value

  val अस्पर्ष = Value(0)
  val कण्ठ्य = Value(1)
  val तालव्य  = Value(2)
  val मूर्धन्य = Value(3)
  val दन्त्य = Value(4)
  val अोष्ठ्य = Value(5)
}

/**
 *
 */
object स्पर्ष_मात्रा extends Enumeration{
  type स्पर्ष_मात्रा = Value
  val पूर्ण = Value(10)
  val अन्तस्थ = Value(9)
  val पादोन = Value(7)  // 3/4th
  val अर्ध = Value(5)
  val शून्य = Value(0)



}


//case class स्पर्ष(स्थान:स्पर्ष_स्थान.स्पर्ष_स्थान , मात्रा : स्पर्ष_मात्रा.स्पर्ष_मात्रा )

object प्राण extends Enumeration{
  type प्राण = Value

  val मा = Value(0)
  val अल्पप्राण = Value(1)
  val महाप्राण = Value(2)
}

// स्वरों में
object  जिह्वा_संकुचित extends Enumeration{
  type जिह्वा_संकुचित = Value
  val संकुचित_न = Value(1)   // अ   अा
  val संकुचित_अल्प = Value(2)  //उ,ऊ,
  val संकुचित_दीर्घ = Value(3)     //अो अौ
}


object _घोष extends Enumeration{
  type _घोष = Value
  val अघोष = Value(0)
  val घोष = Value(1)
}

object _अनुनासिक extends Enumeration{
  type _अनुनासिक = Value
  val अनुनासिक_न = Value(0)
  val अनुनासिक = Value(1)
}

object _ऊष्म extends Enumeration{
  type _ऊष्म = Value
  val ऊष्म_न = Value(0)
  val ऊष्म = Value(1)
}


object types{
  type स्पर्ष = (स्पर्ष_स्थान.स्पर्ष_स्थान ,  स्पर्ष_मात्रा.स्पर्ष_मात्रा )
}

object implicites {
  import types.स्पर्ष
  implicit def स्पर्ष_संयोजक  (स: स्पर्ष )= List(स)

}

import सत्य._
import प्राण._
import समय._
import जिह्वा_संकुचित._
import स्पर्ष_मात्रा._
import _घोष._
import _अनुनासिक._
import _ऊष्म._
import स्पर्ष_स्थान._

import implicites._
import types._



trait व्यन्जन
trait स्वर {
  def मात्रा:String
}
trait सन्युक्त

case class अक्षर(
    अक्षर : String,
    स्पर्ष : List[स्पर्ष],
    प्राण : प्राण,
    समय : समय,
    जिह्वा_संकुचित:जिह्वा_संकुचित,// जिह्वा संकुचित अस्ति/नास्ति
    घोष : _घोष,
    अनुनासिक:_अनुनासिक,
    ऊष्म:_ऊष्म
) {

//  def +(अन्य:अक्षर)=संयुक्ताक्षर(अाम्,this,अन्य)  //इसे ढँग से करें
//  def ++(अन्य:अक्षर)=संयुक्ताक्षर(ना,this,अन्य)

}


object अक्षर{

  val स्वर_कोष= scala.collection.mutable.Map[String,स्वर] ()
  val मात्रा_कोष= scala.collection.mutable.Map[String,स्वर] ()

  val व्यन्जन_कोष= scala.collection.mutable.Map[String,व्यन्जन] ()

//  val सन्युक्ताक्षर_कोष= scala.collection.mutable.Map[String,सन्युक्त] ()


    def apply(
                    अक्षर : String,
                    स्पर्ष : List[स्पर्ष],
                    प्राण : प्राण,
                    समय : समय,
                    जिह्वा_संकुचित:जिह्वा_संकुचित,// जिह्वा संकुचित अस्ति/नास्ति
                    घोष : _घोष,
                    अनुनासिक:_अनुनासिक,
                    ऊष्म:_ऊष्म,
                    मात्रा : Option[String] =None
                    ):अक्षर ={
       मात्रा match{
         case Some(म) =>{
           val स्वर = new अक्षर(अक्षर,स्पर्ष,प्राण ,समय,जिह्वा_संकुचित,घोष,अनुनासिक,ऊष्म) with स्वर { override def मात्रा = म}
           स्वर_कोष(अक्षर) = स्वर
           मात्रा_कोष(अक्षर) = स्वर
           स्वर
         }
         case None => {
           val व्यन्जन =  new अक्षर(अक्षर,स्पर्ष,प्राण ,समय,जिह्वा_संकुचित,घोष,अनुनासिक,ऊष्म) with व्यन्जन
           व्यन्जन_कोष(अक्षर) = व्यन्जन
           व्यन्जन

         }
      }
    }

   def सन्युक्त(_अक्षर:String, घटक_१:अक्षर,घटक_२:अक्षर,मात्रा : Option[String] =None)  ={

     val स्पर्ष = घटक_१.स्पर्ष :::घटक_२.स्पर्ष
     val प्राण =प्राण( Math.max(  घटक_१.प्राण.id, घटक_२.प्राण.id))
     val समय = समय( Math.max(  घटक_१.समय.id, घटक_२.समय.id))
     val जिह्वा_संकुचित  = जिह्वा_संकुचित( Math.max(  घटक_१.जिह्वा_संकुचित.id, घटक_२.जिह्वा_संकुचित.id))
     val घोष  = _घोष ( Math.max(  घटक_१.घोष.id, घटक_२.घोष.id))
     val अनुनासिक  = अनुनासिक( Math.max(  घटक_१.अनुनासिक.id, घटक_२.अनुनासिक.id))
     val ऊष्म  = _ऊष्म( Math.max(  घटक_१.ऊष्म.id, घटक_२.ऊष्म.id))

     मात्रा match{
       case Some(म) => {
         assert((  घटक_१.isInstanceOf[स्वर] &&  घटक_२.isInstanceOf[स्वर])," मात्रा अस्ति किन्तु घटक स्वर नास्ति")

         val स्वर = new अक्षर(_अक्षर,स्पर्ष,प्राण ,समय,जिह्वा_संकुचित,घोष,अनुनासिक,ऊष्म) with सन्युक्त with स्वर { override def मात्रा = म}
         स्वर_कोष(_अक्षर) = स्वर
         मात्रा_कोष(_अक्षर) = स्वर
         स्वर
       }
       case None => {
         assert( !(घटक_१.isInstanceOf[स्वर] &&  घटक_२.isInstanceOf[स्वर])," मात्रा नास्ति किन्तु घटक स्वर नास्ति")

         val व्यन्जन = new अक्षर(_अक्षर,स्पर्ष,प्राण ,समय,जिह्वा_संकुचित,घोष,अनुनासिक,ऊष्म) with व्यन्जन  with सन्युक्त
         व्यन्जन_कोष(_अक्षर) = व्यन्जन
         व्यन्जन

       }
     }
   }



//  import types.स्पर्ष
  /**
   * स्वर
   */

  val अ =   अक्षर("अ", (अस्पर्ष,शून्य),अल्पप्राण, ह्रस्व, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some(""))
  val अा =  अक्षर("अा",(अस्पर्ष,शून्य),अल्पप्राण, दीर्घ, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ा"))

  val इ =   अक्षर("इ",(तालव्य,पादोन),अल्पप्राण, ह्रस्व, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ि"))
  val ई =   अक्षर("ई",(तालव्य,पादोन),अल्पप्राण, दीर्घ, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ी"))

  val उ =   अक्षर("उ",(अोष्ठ्य,पादोन),अल्पप्राण, ह्रस्व, संकुचित_अल्प,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ु"))
  val ऊ =   अक्षर("ऊ",(अोष्ठ्य,पादोन),अल्पप्राण, दीर्घ, संकुचित_अल्प,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ू"))

  val ए =   अक्षर("ए",(तालव्य,अर्ध),अल्पप्राण, ह्रस्व, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("े"))
//  val ऐ = new अक्षर("ऐ",(अस्पर्ष,शून्य)::(तालव्य,अर्ध),अल्पप्राण, दीर्घ, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ा")) with सन्युक्त with स्वर{ override def मात्रा = "े"}
  val ऐ =   अक्षर.सन्युक्त("ऐ",अ,ई,Some("ै"))

  val अो =   अक्षर("ओ",(अोष्ठ्य,अर्ध),अल्पप्राण, ह्रस्व, संकुचित_दीर्घ,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ो"))
//  val औ = new अक्षर("औ",(अस्पर्ष,शून्य)::(अोष्ठ्य,पादोन),अल्पप्राण, दीर्घ, संकुचित_दीर्घ,  घोष ,  अनुनासिक_न, ऊष्म_न,Some("ा")) with सन्युक्त with स्वर{ override def मात्रा = "ौ"}
  val औ =   अक्षर.सन्युक्त("अौ",अ,ऊ,Some("ौ"))

  val अं =   अक्षर("अं",(अस्पर्ष,शून्य)::(कण्ठ्य,पूर्ण),अल्पप्राण, ह्रस्व, संकुचित_न,  घोष ,  अनुनासिक, ऊष्म_न,Some("ं"))
  val अह् =   अक्षर.सन्युक्त("अ:",अ,ह्,Some(":"))


  /**
   * व्यन्जन
   */


  //असपर्ष
  val ह् =   अक्षर("ह्",(अस्पर्ष,शून्य),महाप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म) ; val ह = अक्षर.सन्युक्त("ह",ह्,अ)



  // कण्ठ्य
  val क् =   अक्षर("क्",(कण्ठ्य,पूर्ण),अल्पप्राण, न्यून,  संकुचित_न,  अघोष,  अनुनासिक_न,  ऊष्म_न); val क = अक्षर.सन्युक्त("ह",ह्,अ)
  val ख् =   अक्षर("ख्",(कण्ठ्य,पूर्ण),महाप्राण , न्यून, संकुचित_न,  अघोष,  अनुनासिक_न,  ऊष्म_न); val ख = अक्षर.सन्युक्त("ह",ह्,अ)
  val ग् =   अक्षर("ग्",(कण्ठ्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ग = अक्षर.सन्युक्त("ह",ह्,अ)
  val घ् =   अक्षर("घ्",(कण्ठ्य,पूर्ण),महाप्राण , न्यून, संकुचित_न,  घोष ,अनुनासिक_न,  ऊष्म_न); val घ = अक्षर.सन्युक्त("ह",ह्,अ)
  val ङ् =   अक्षर("ङ्",(कण्ठ्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक, ऊष्म_न); val ङ = अक्षर.सन्युक्त("ह",ह्,अ)


  // तालव्य
  val च् =   अक्षर("च्",(तालव्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न, अघोष,  अनुनासिक_न,  ऊष्म_न); val च = अक्षर.सन्युक्त("ह",ह्,अ)
  val छ् =   अक्षर("छ्",(तालव्य,पूर्ण),महाप्राण , न्यून,संकुचित_न,अघोष, अनुनासिक_न,  ऊष्म_न); val छ = अक्षर.सन्युक्त("ह",ह्,अ)
  val ज् =   अक्षर("ज्",(तालव्य,पूर्ण),अल्पप्राण, न्यून,संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ज = अक्षर.सन्युक्त("ह",ह्,अ)
  val झ् =   अक्षर("झ्",(तालव्य,पूर्ण),महाप्राण , न्यून,संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val झ = अक्षर.सन्युक्त("ह",ह्,अ)
  val ञ् =   अक्षर("ञ्",(तालव्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक, ऊष्म_न); val ञ = अक्षर.सन्युक्त("ह",ह्,अ)

  val य् =   अक्षर("य्",(तालव्य,अन्तस्थ),अल्पप्राण, न्यून,संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न); val य = अक्षर.सन्युक्त("ह",ह्,अ)

  val श् =   अक्षर("श्",(तालव्य,पादोन),महाप्राण, न्यून, संकुचित_न,  अघोष,  अनुनासिक_न, ऊष्म); val श = अक्षर.सन्युक्त("ह",ह्,अ)

  // मूर्धन्य
  val ट् =   अक्षर("ट्",(मूर्धन्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न, अघोष,  अनुनासिक_न,  ऊष्म_न); val ट = अक्षर.सन्युक्त("ह",ह्,अ)
  val ठ् =   अक्षर("ठ्",(मूर्धन्य,पूर्ण),महाप्राण , न्यून,संकुचित_न, अघोष,  अनुनासिक_न,  ऊष्म_न); val ठ= अक्षर.सन्युक्त("ह",ह्,अ)
  val ड् =   अक्षर("ड्",(मूर्धन्य,पूर्ण),अल्पप्राण, न्यून,संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ड= अक्षर.सन्युक्त("ह",ह्,अ)
  val ढ् =   अक्षर("ढ्",(मूर्धन्य,पूर्ण),महाप्राण , न्यून,संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ढ= अक्षर.सन्युक्त("ह",ह्,अ)
  val ण् =   अक्षर("ण्",(मूर्धन्य,पूर्ण),अल्पप्राण, न्यून,संकुचित_न,  घोष ,  अनुनासिक, ऊष्म_न); val ण= अक्षर.सन्युक्त("ह",ह्,अ)

  val र् =   अक्षर("र्",(मूर्धन्य,अन्तस्थ),अल्पप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न); val र = अक्षर.सन्युक्त("ह",ह्,अ)

  val ष् =   अक्षर("ष्",(मूर्धन्य,पादोन),महाप्राण, न्यून, संकुचित_न,  अघोष, अनुनासिक_न, ऊष्म); val ष = अक्षर.सन्युक्त("ह",ह्,अ)

  // दन्त्य
  val त् =   अक्षर("त्",(दन्त्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  अघोष,  अनुनासिक_न,  ऊष्म_न); val त = अक्षर.सन्युक्त("ह",ह्,अ)
  val थ् =   अक्षर("थ्",(दन्त्य,पूर्ण),महाप्राण , न्यून, संकुचित_न,  अघोष,  अनुनासिक_न,  ऊष्म_न); val थ = अक्षर.सन्युक्त("ह",ह्,अ)
  val द् =   अक्षर("द्",(दन्त्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val द = अक्षर.सन्युक्त("ह",ह्,अ)
  val ध् =   अक्षर("ध्",(दन्त्य,पूर्ण),महाप्राण , न्यून, संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ध= अक्षर.सन्युक्त("ह",ह्,अ)
  val न् =   अक्षर("न्",(दन्त्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक, ऊष्म_न); val न = अक्षर.सन्युक्त("ह",ह्,अ)

  val ल् =   अक्षर("ल्",(दन्त्य,अन्तस्थ),अल्पप्राण, न्यून,संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न); val ल = अक्षर.सन्युक्त("ह",ह्,अ)

  val स् =   अक्षर("स्",(दन्त्य,पादोन),महाप्राण, न्यून, संकुचित_न,  अघोष,  अनुनासिक_न, ऊष्म); val स = अक्षर.सन्युक्त("ह",ह्,अ)

  // अोष्ठ्य
  val प् =   अक्षर("प्",(अोष्ठ्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,अघोष,  अनुनासिक_न,  ऊष्म_न); val प = अक्षर.सन्युक्त("ह",ह्,अ)
  val फ् =   अक्षर("फ्",(अोष्ठ्य,पूर्ण),महाप्राण , न्यून, संकुचित_न, अघोष,  अनुनासिक_न,  ऊष्म_न); val फ = अक्षर.सन्युक्त("ह",ह्,अ)
  val ब् =   अक्षर("ब्",(अोष्ठ्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val ब = अक्षर.सन्युक्त("ह",ह्,अ)
  val भ् =   अक्षर("भ्",(अोष्ठ्य,पूर्ण),महाप्राण , न्यून, संकुचित_न,  घोष , अनुनासिक_न,  ऊष्म_न); val भ = अक्षर.सन्युक्त("ह",ह्,अ)
  val म् =   अक्षर("म्",(अोष्ठ्य,पूर्ण),अल्पप्राण, न्यून, संकुचित_न, घोष ,  अनुनासिक, ऊष्म_न); val म = अक्षर.सन्युक्त("म",म्,अ)

  val व् =   अक्षर("व्",(अोष्ठ्य,अन्तस्थ),अल्पप्राण, न्यून, संकुचित_न,  घोष ,  अनुनासिक_न, ऊष्म_न); val व = अक्षर.सन्युक्त("व",व्,अ)








}

